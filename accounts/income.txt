from .models import Expense, TotalExpense
from .forms import ExpenseInputForm
from decimal import Decimal

@login_required
def create_expense(request):

    total_expense = TotalExpense.objects.filter(user=request.user).first()  #obj asociated with user
    if not total_expense:                                                   # If TotalExpense object does not exist, create it
        total_expense = TotalExpense.objects.create(user=request.user)

    if request.method == 'POST':
        print("POST")
        form = ExpenseInputForm(request.POST)
        if form.is_valid():
            expense = form.save(commit=False)
            # Set the user for the expense based on the current user
            expense.user = request.user
            # Save the expense object to the database
            expense.save()

            income = Income.objects.get(user=request.user)
            income.income_left = income.income_left - expense.value
            income.save()
            # Update total expenses
            update_total_expenses(request.user)

            return HttpResponseRedirect(request.path_info)
            #return redirect('expense_list')  # Redirect to a page showing the list of expenses
    
    elif request.method == 'GET':
        print("GET")
        total_amount = request.GET.get('total_amount2')
        print("1 Total Amount:", total_amount)
        total_amount = Decimal(total_amount) if total_amount else None
        print("2 Total Amount:", total_amount)
        form = ExpenseInputForm(initial={'value': total_amount})

    # Get total expenses for the current user
    total_expenses = TotalExpense.objects.get(user=request.user)

    print(total_expenses)
    
    return render(request, 'accounts/expense.html', {'form': form, 'total_expenses': total_expenses})

def update_total_expenses(user):
    # Get all expenses of the user from database
    user_expenses = Expense.objects.filter(user=user)
    # Initialize total expense for each category
    total_expenses = {
        'housing': 0,
        'food': 0,
        'health': 0,
        'utilities': 0,
        'transport': 0,
        'personal': 0,
        'entertainment': 0,
        'vices': 0,
        'other': 0,
    }

    # Calculate total expenses for each category
    #This line starts a loop that iterates over each expense object in the user_expenses queryset.
    #user_expenses represents a single expense entry made by the user with expense_create()
    for expense in user_expenses:
        total_expenses[expense.category] += expense.value  #cauta categorie la care sa adauge ce a pus useul in fct de mai sus

    #Check if TotalExpense object already exists for the user
    total_expense = TotalExpense.objects.filter(user=user).first()

    if not total_expense:
    # If TotalExpense object does not exist, create it
        total_expense = TotalExpense.objects.create(user=user)
    
    # Update individual expense fields, si le atribui pt afisare asa
    total_expense.total_housing_expense = total_expenses['housing']
    total_expense.total_food_expense = total_expenses['food']
    total_expense.total_health_expense = total_expenses['health']
    total_expense.total_utilities_expense = total_expenses['utilities']
    total_expense.total_transport_expense = total_expenses['transport']
    total_expense.total_personal_expense = total_expenses['personal']
    total_expense.total_entertainment_expense = total_expenses['entertainment']
    total_expense.total_vices_expense = total_expenses['vices']
    total_expense.total_other_expense = total_expenses['other']

    # Update total expenses field
    total_expense.update_total_expenses()  



    class TotalExpense(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    total_housing_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_food_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_health_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_utilities_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_transport_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_personal_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_entertainment_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_vices_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_other_expense = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    total_expenses = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    

    def update_total_expenses(self):
        self.total_expenses = (
            self.total_housing_expense + 
            self.total_food_expense + 
            self.total_health_expense + 
            self.total_utilities_expense + 
            self.total_transport_expense + 
            self.total_personal_expense + 
            self.total_entertainment_expense + 
            self.total_vices_expense + 
            self.total_other_expense
        )
        self.save()



# Import the triangular_sigmoid function from the fuzzylogic library
from fuzzylogic.functions import triangular_sigmoid

# Define a function to determine the membership of an income value in different income categories
def income_membership(income):
    """
    Determine the membership of an income value in the categories: high, medium, low.
    
    Args:
    - income (float): The income value.
    
    Returns:
    - dict: A dictionary showing the percentage of income belonging to each category.
    """
    
    # Define membership functions for income categories using triangular_sigmoid
    high_income = triangular_sigmoid(60000, 100000)  # Example income ranges for high income
    medium_income = triangular_sigmoid(10000, 50000)  # Example income ranges for medium income
    low_income = triangular_sigmoid(0, 40000)  # Example income ranges for low income
    
    # Calculate membership degrees for each income category
    membership_high = high_income(income)
    membership_medium = medium_income(income)
    membership_low = low_income(income)
    
    # # Calculate the total membership across all categories
    # total_membership = membership_high + membership_medium + membership_low
    
    # # Calculate the percentage of income belonging to each category
    # percentage_high = (membership_high / total_membership) * 100
    # percentage_medium = (membership_medium / total_membership) * 100
    # percentage_low = (membership_low / total_membership) * 100
    
    # # Round percentages to two decimal places
    # percentage_high = round(percentage_high, 2)
    # percentage_medium = round(percentage_medium, 2)
    # percentage_low = round(percentage_low, 2)
    
    # Create a dictionary to store the percentages of income belonging to each category
    membership_dict = {
        'high': membership_high,
        'medium': membership_medium,
        'low': membership_low
    }
    
    # Return the dictionary
    return membership_dict

# Example usage
income_value = 5000  # Example income value
income_dict = income_membership(income_value)  # Determine the membership of the income value
print(income_dict)  # Print the dictionary showing the percentages of income belonging to each category





output recomandation:
Based on your financial data, here are some recommendations to help you organize your budget: 1. How should I split my income left for this month between my economies fund and my goal fund? To start building up your funds, it would be beneficial to allocate a portion of your left income to both your economies fund and your goal fund. Consider dividing the 300.00 as follows: - Allocate 150.00 to your economies fund. - Allocate 150.00 to your savings fund for the car goal. 2. What amount should I put in each category? Given your current expenses breakdown, you may consider adjusting your spending in the following categories to accommodate your savings goals and maximize your income left at the end of the month: - Housing: 100.00 - This seems reasonable. - Food: 300.00 - Considering reducing this to maybe 250.00 to free up more funds for savings. - Utilities: 200.00 - This is essential, but see if there are any ways to reduce these costs. - Transport: 50.00 - This seems reasonable. - Vices: 90.00 - Consider reducing or eliminating non-essential expenses here. - Other: 50.00 - Evaluate if this amount can be reduced to allocate more to savings. 3. How can I maximize my income left at the end of the month? To increase the amount left at the end of the month, you can: - Review your food expenses and see if there are areas where you can cut back without compromising on nutrition. - Evaluate vices spending and consider reducing or eliminating these expenses to save more. - Look for ways to reduce utility costs such as using energy-efficient appliances and being mindful of water and electricity usage. - Consider setting a specific budget for personal and entertainment expenses to avoid overspending. - Continuously track your expenses and look for opportunities to save or reduce costs in different


Based on the fuzzy logic memberships provided for your finances, here are the answers to your questions: 1. You should split the income left for this month between your economies fund and your goal fund based on their memberships. The economies fund has a higher membership in the 'high' category compared to the goal fund, so you should allocate more funds towards the economies fund. 2. To determine the exact amount to put in each category, you can calculate the weighted average of the memberships for both funds and allocate the income left accordingly. For example, if the economies fund has a membership of 0.8 in the 'high' category and the goal fund has a membership of 0.2 in the 'high' category, you can allocate 80% of the income left to the economies fund and 20% to the goal fund. 3. To maximize your income left at the end of the month, you can consider reducing expenses in categories with higher memberships in the 'high' or 'medium' range and increasing expenses in categories with lower memberships. Based on the data provided, you could potentially reduce expenses in transport and food categories, while increasing expenses in housing and other categories to achieve a higher income left at the end of the month. It's important to regularly review and adjust your budget based on your financial goals and priorities to ensure you are on track to achieve them.